import { Observable, Subject, of } from 'rxjs';
import { Enums } from '../enums/enums';
import MockData from '../mock-data/db.generated.json';
import { ModelAccountFromToken } from '../models/authentication/account-from-token.model';
import { AuthenticationResult, BrowserConfiguration, EndSessionRequest, EventMessage, IPublicClientApplication, ITokenCache, Logger } from '@azure/msal-browser';
import { ErrorSeverityLevel } from '../../config/config.interface';
import { MsalService } from '@azure/msal-angular';
import { GuardNullOrUndefined } from '../helpers/guard-null-undefined.helper';

export class UnitTestHelpers {

    static readonly MockObjects = class {

        static readonly abstractAbstractEndpoints = jasmine.createSpyObj('AbstractEndpoints', {

            user: {
                saveUser: '',
                getUserByUserId: (userId: string): string => {
                    return '';
                }
            }
        });

        static readonly abstractAppAuthentication = jasmine.createSpyObj('AbstractAppAuthentication', {
            getAllUsers: of(MockData.users),

            isLoggedIn: of(false),

            account: (): ModelAccountFromToken | null => {
                return null;
            },

            registerForAuthenticationEvents: (): void => {
                return;
            },

            setRegisterAuthority: (): void => {
                return;
            },

            setLoginAuthority: (): void => {
                return;
            },

            logout: (): void => {
                return;
            }

        });

        static readonly abstractAppConfig = jasmine.createSpyObj('AppConfig', {

            apiBaseURL: 'http://0.0.0.0',
            appInsightsKey: 'testing',
            authentication: {
                authority: 'testing',
                clientId: 'testing',
                navigateToLoginRequestUrl: false,
                postLogoutRedirectUri: 'testing',
                redirectUri: 'testing',
                validateAuthority: false
            },
            redirectUrl: 'testing',
            logging: {
                errorLogTo: [],
                loggingLevel: 'error'
            },

            loadConfig: (): Promise<void> => {
                return new Promise(res => setTimeout(res, 200));
            }
        });

        static readonly abstractServiceUser = jasmine.createSpyObj('AbstractServiceUser', {
            getAllUsers: of(MockData.users),
        });

        static readonly appErrorHandler = jasmine.createSpyObj('AppErrorHandler', {
            displayErrorDialog: (
                origin: any, errorMessage: string, header: string = 'Error',
                icon = Enums.MaterialIcons.Error,
                displayReportIssueButton: boolean = false,
                error?: Error
            ): void => {
                return;
            }
        });

        static readonly appMonitoring = jasmine.createSpyObj('AppMonitoring', {


            microsoftVariableName: 'Microsoft',

            userId: '1',

            loggingLevel: Enums.ErrorSeverityLevel.Info,
            logTo: [],
            appInsights: null,

            logEvent: (
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                origin: any,
                descriptionOfEvent: string,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                properties?: { [key: string]: any }): void => {
                return;
            },

            logMetric: (
                nameOfMetric: string,
                averageOfMetric: number,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                propertiesToTrack?: { [key: string]: any }): void => {
                return;
            },

            logException: (
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                origin: any,
                exception: Error | string,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                properties: { [key: string]: any } = {},
                severityLevel:
                    | ErrorSeverityLevel.Error
                    | ErrorSeverityLevel.Critical = Enums.ErrorSeverityLevel.Error): void => {
                return;
            },

            getOriginName: (origin: any): string => {
                const originName = typeof (origin) === 'string' ? origin : origin?.constructor.name;
                return originName;
            },

            addUserIdToProperties: (properties: { [key: string]: any }): void => {
                return;
            },

            addOriginToProperties: (origin: string, properties: { [key: string]: any }): void => {
                return;
            },

            logTrace: (message: string, properties?: { [key: string]: any }): void => {
                return;
            }
        });


        static readonly msalBroadcastService = jasmine.createSpyObj('MsalBroadcastService', {
            msalSubject$: new Subject<EventMessage>().asObservable(),
        });

        static readonly publicClientApplication = () => {
            const spyObj = jasmine.createSpyObj<IPublicClientApplication>('IPublicClientApplication', {
                initialize: Promise.resolve(),
                acquireTokenPopup: Promise.resolve({} as AuthenticationResult),
                acquireTokenRedirect: Promise.resolve(),
                acquireTokenSilent: Promise.resolve({} as AuthenticationResult),
                acquireTokenByCode: Promise.resolve({} as AuthenticationResult),
                addEventCallback: 'callbackId',
                removeEventCallback: undefined,
                addPerformanceCallback: 'performanceCallbackId',
                removePerformanceCallback: true,
                enableAccountStorageEvents: undefined,
                disableAccountStorageEvents: undefined,
                getAccount: null,
                getAccountByHomeId: null,
                getAccountByLocalId: null,
                getAccountByUsername: null,
                getAllAccounts: [],
                handleRedirectPromise: Promise.resolve(null),
                loginPopup: Promise.resolve({} as AuthenticationResult),
                loginRedirect: Promise.resolve(),
                logout: Promise.resolve(),
                logoutRedirect: Promise.resolve(),
                logoutPopup: Promise.resolve(),
                ssoSilent: Promise.resolve({} as AuthenticationResult),
                getTokenCache: {} as ITokenCache,
                getLogger: {} as Logger,
                setLogger: undefined,
                setActiveAccount: undefined,
                getActiveAccount: null,
                initializeWrapperLibrary: undefined,
                setNavigationClient: undefined,
                getConfiguration: {} as BrowserConfiguration,
                hydrateCache: Promise.resolve(),
                clearCache: Promise.resolve()
            });
            // return custom values
            spyObj.getAllAccounts.and.returnValue(MockData.accountsFromB2C as any)

            return spyObj;
        }

        static readonly msalService = () => {
            const spyObj = jasmine.createSpyObj<MsalService>('MsalService', {
                instance: undefined,
                initialize: of(void 0),
                acquireTokenPopup: of({} as AuthenticationResult),
                acquireTokenRedirect: of(void 0),
                acquireTokenSilent: of({} as AuthenticationResult),
                handleRedirectObservable: of({} as AuthenticationResult),
                loginPopup: of({} as AuthenticationResult),
                loginRedirect: of(void 0),
                logout: of(void 0),
                logoutRedirect: of(void 0),
                logoutPopup: of(void 0),
                ssoSilent: of({} as AuthenticationResult),
                getLogger: {} as Logger,
                setLogger: undefined
            });
            // return custom values
            spyObj.instance = UnitTestHelpers.MockObjects.publicClientApplication();

            return spyObj;
        }
    };
}
