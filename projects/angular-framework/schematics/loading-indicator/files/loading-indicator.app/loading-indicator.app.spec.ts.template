import { TestBed } from '@angular/core/testing';
import { AppLoadingIndicator } from './loading-indicator.app';

describe('AppLoadingIndicator', () => {
  let service: AppLoadingIndicator;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [AppLoadingIndicator]
    });
    service = TestBed.inject(AppLoadingIndicator);
  });

  it('should have initial loading status as false', () => {
    expect(service.loading).toBeFalse();
  });

  it('should set loading to true and emit the correct value when startLoading is called', () => {
    spyOn(service.loadingStatus, 'next');
    service.startLoading();
    expect(service.loading).toBeTrue();
    expect(service.loadingStatus.next).toHaveBeenCalledWith(true);
  });

  it('should set loading to false and emit the correct value when stopLoading is called', () => {
    spyOn(service.loadingStatus, 'next');
    service.stopLoading();
    expect(service.loading).toBeFalse();
    expect(service.loadingStatus.next).toHaveBeenCalledWith(false);
  });

  it('should get the correct loading status', () => {
    service['_loading'] = true;
    expect(service.loading).toBeTrue();

    service['_loading'] = false;
    expect(service.loading).toBeFalse();
  });

  it('should set the loading status and emit the correct value', () => {
    spyOn(service.loadingStatus, 'next');

    service.loading = true;
    expect(service.loading).toBeTrue();
    expect(service.loadingStatus.next).toHaveBeenCalledWith(true);

    service.loading = false;
    expect(service.loading).toBeFalse();
    expect(service.loadingStatus.next).toHaveBeenCalledWith(false);
  });
});
