import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Router } from '@angular/router';
import { throwError } from 'rxjs';
import { AppMonitoring } from '../../app-services/monitoring/monitor.app';
import { AppSnackBar } from '../../app-services/snackbar/snackbar.app';
import { MaterialDesignConfig } from '../../app.config.material';
import { ModelUser } from '../../models/user/user.model';
import { AbstractEndpoints } from '../../services/endpoints/endpoints.service.abstract';
import { AbstractServiceUser } from '../../services/user/user.service.abstract';
import { SnackBarExampleComponent } from '../../snack-bar-components/snack-bar-example/snack-bar-example.component';
import { UnitTestHelpers } from '../../unit-tests-helpers/unit-test.helper';
import { UserListComponent } from './user-list.component';

describe('UserListComponent', () => {
    let component: UserListComponent;
    let fixture: ComponentFixture<UserListComponent>;
    let mockRouter: jasmine.SpyObj<Router>;
    let mockServiceUser: jasmine.SpyObj<AbstractServiceUser>;
    let mockAppMonitoring: jasmine.SpyObj<AppMonitoring>;
    let mockAppSnackBar: jasmine.SpyObj<AppSnackBar>;
    let mockEndpoints: jasmine.SpyObj<AbstractEndpoints>;

    beforeEach(async () => {
        mockRouter = UnitTestHelpers.MockObjects.router();
        mockServiceUser = UnitTestHelpers.MockObjects.abstractServiceUser();
        mockAppMonitoring = UnitTestHelpers.MockObjects.appMonitoring();
        mockAppSnackBar = UnitTestHelpers.MockObjects.appSnackbar();
        mockEndpoints = UnitTestHelpers.MockObjects.abstractEndpoints();

        await TestBed.configureTestingModule({
            imports: [
                HttpClientTestingModule,
                ...MaterialDesignConfig,
                UserListComponent
            ]
        }).compileComponents();

        TestBed.overrideComponent(UserListComponent, {
            set: {
                providers: [
                    { provide: Router, useValue: mockRouter },
                    { provide: AbstractServiceUser, useValue: mockServiceUser },
                    { provide: AppMonitoring, useValue: mockAppMonitoring },
                    { provide: AbstractEndpoints, useValue: mockEndpoints },
                    { provide: AppSnackBar, useValue: mockAppSnackBar }
                ]
            },
        });

        fixture = TestBed.createComponent(UserListComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });

    it('should create', () => {
        expect(component).toBeTruthy();
    });

    it('should load users on initialization', () => {
        expect(mockServiceUser.getUserList).toHaveBeenCalled();
        expect(component.users).toBeDefined();
    });

    it('should handle error when loading users fails', () => {
        mockServiceUser.getUserList.and.returnValue(throwError(() => new Error('Testing error')));
        component.loadUsers();
        expect(mockServiceUser.getUserList).toHaveBeenCalled();
        expect(mockAppMonitoring.logException).toHaveBeenCalled();
    });

    it('should navigate to user details', () => {
        const user: ModelUser = UnitTestHelpers.MockData.users[0];

        component.navigateToDetails(user);

        expect(mockRouter.NavigateTo.UserDetails).toHaveBeenCalledWith(user);
    });

    it('should open snackbar', () => {
        component.openSnackbar();
        expect(mockAppSnackBar.showSnackbar).toHaveBeenCalledWith(SnackBarExampleComponent, jasmine.any(Function));
    });
});
