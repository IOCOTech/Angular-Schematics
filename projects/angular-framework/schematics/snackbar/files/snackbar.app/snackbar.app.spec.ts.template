import { ComponentType } from '@angular/cdk/portal';
import { TestBed } from '@angular/core/testing';
import { ModelSnackBarDetails } from '../../models/snackbar/snackbar-details.model';
import { AppSnackBar } from './snackbar.app';

describe('AppSnackBar', () => {
    let service: AppSnackBar;

    beforeEach(() => {
        TestBed.configureTestingModule({
            providers: [AppSnackBar]
        });
        service = TestBed.inject(AppSnackBar);
    });

    it('should be created', () => {
        expect(service).toBeTruthy();
    });

    it('should emit onSnackbar event with correct details', () => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const componentType: ComponentType<any> = {} as ComponentType<any>;
        const callbackFunction = jasmine.createSpy('callbackFunction');

        service.onSnackbar.subscribe((details: ModelSnackBarDetails) => {
            expect(details.componentRef).toBe(componentType);
            expect(details.callbackOnAction).toBe(callbackFunction);
        });

        service.showSnackbar(componentType, callbackFunction);
    });

    it('should set callbackOnAction and call callbackFunction when dismissing snackbar', () => {
        const callbackFunction = jasmine.createSpy('callbackFunction');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        service.showSnackbar({} as ComponentType<any>, callbackFunction);

        service.dismissSnackBar('response');

        expect(service.callbackOnAction).toBe(callbackFunction);
        expect(callbackFunction).toHaveBeenCalledWith('response');
    });

    it('should emit onDismissSnackbar event when dismissing snackbar', () => {
        const callbackFunction = jasmine.createSpy('callbackFunction');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        service.showSnackbar({} as ComponentType<any>, callbackFunction);

        let dismissed = false;
        service.onDismissSnackbar.subscribe(() => {
            dismissed = true;
        });

        service.dismissSnackBar();

        expect(dismissed).toBe(true);
    });
});
