import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { HttpBackend } from '@angular/common/http';
import { Enums } from '../../enums/enums';
import { AppConfig } from './config.app';
import { of, throwError } from 'rxjs';


/* eslint-disable */
describe('AppConfig', () => {
    let service: AppConfig;
    let httpMock: HttpTestingController;
    let mockHttpCall: jasmine.SpyObj<any>;

    beforeEach(() => {
        mockHttpCall = jasmine.createSpyObj('HttpClient', ['get'])

        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            providers: [
                { provide: HttpBackend, useClass: HttpTestingController }
            ]
        });

        service = TestBed.inject(AppConfig);
        httpMock = TestBed.inject(HttpTestingController);

    });

    afterEach(() => {
        httpMock.verify();
    });

    it('should be created', () => {
        expect(service).toBeTruthy();
    });

    it('should load config and set logging level to Info', async () => {
        const mockConfig = {
            logging: {
                loggingLevel: 'info'
            }
        };

        mockHttpCall.get.and.returnValue(of(mockConfig));
        (service['http'] as any) = mockHttpCall;

        const promise = service.loadConfig();

        expect(mockHttpCall.get).toHaveBeenCalledWith('../../../config.json');

        await promise;

        expect(service.logging.loggingLevel).toBe(Enums.ErrorSeverityLevel.Info);
    });

    it('should load config and set logging level to Warning', async () => {
        const mockConfig = {
            logging: {
                loggingLevel: 'warning'
            }
        };

        mockHttpCall.get.and.returnValue(of(mockConfig));
        (service['http'] as any) = mockHttpCall;

        const promise = service.loadConfig();

        expect(mockHttpCall.get).toHaveBeenCalledWith('../../../config.json');

        await promise;

        expect(service.logging.loggingLevel).toBe(Enums.ErrorSeverityLevel.Warning);
    });

    it('should load config and set logging level to Error', async () => {
        const mockConfig = {
            logging: {
                loggingLevel: 'error'
            }
        };

        mockHttpCall.get.and.returnValue(of(mockConfig));
        (service['http'] as any) = mockHttpCall;

        const promise = service.loadConfig();

        expect(mockHttpCall.get).toHaveBeenCalledWith('../../../config.json');
        
        await promise;

        expect(service.logging.loggingLevel).toBe(Enums.ErrorSeverityLevel.Error);
    });

    it('should default to Info logging level if config level is unknown', async () => {
        const mockConfig = {
            logging: {
                loggingLevel: 'unknown'
            }
        };

        spyOn(console, 'warn');

        mockHttpCall.get.and.returnValue(of(mockConfig));
        (service['http'] as any) = mockHttpCall;

        const promise = service.loadConfig();

        expect(mockHttpCall.get).toHaveBeenCalledWith('../../../config.json');

        await promise;

        expect(console.warn).toHaveBeenCalledWith(
            "Logging level not set in config.  Level set to 'Info' by default"
        );
        expect(service.logging.loggingLevel).toBe(Enums.ErrorSeverityLevel.Info);
    });

    it('should log an error if loading config fails', async () => {
        spyOn(console, 'error');
        
        mockHttpCall.get.and.returnValue(throwError(() => new Error('Testing error')));
        (service['http'] as any) = mockHttpCall;

        const promise = service.loadConfig();

        try {
            await promise;
        } catch { }

        expect(console.error).toHaveBeenCalled();
    });
});

/* eslint-enable */
