import { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';
import { UserListComponent } from './components/user-list/user-list.component';
import { UserDetailsComponent } from './components/user-details/user-details.component';
import { ModelRouteExtended } from './models/router/route-extended.model';
import { AbstractRouteGuard } from './modules/microsoft-authentication-library/route-guard/route-guard.abstract';

/// This class is added to provide strongly typed routes in the application
export class NavigationRoutes {
    static readonly UserList: ModelRouteExtended = {
        path: 'users',
        title: 'User List',
        navigationPath: 'users',
        component: UserListComponent,
        canActivate: [AbstractRouteGuard]
    }
    
    static readonly UserDetails: ModelRouteExtended = {
        path: 'users/:id',
        title: 'User details',
        navigationPath: 'users',
        component: UserDetailsComponent,
    }

    static readonly NotFound: ModelRouteExtended = {
        path: '**',
        title: 'Not Found',
        navigationPath: '',
        component: PageNotFoundComponent
    }
    
    // This property is used in the 'provideRouter(routes)' method in the app.config.ts
    private static _routesArray: ModelRouteExtended[]= [];
    public static get routes(): ModelRouteExtended[] {
        if (this._routesArray.length === 0) {
            const properties = Object.keys(NavigationRoutes)
            properties.forEach(prop => {
                if (prop !== '_routesArray' && prop !== 'routes')
                this._routesArray.push(NavigationRoutes[prop as (keyof typeof NavigationRoutes)] as ModelRouteExtended)
            });
        }
        return this._routesArray;
    }
}

// export const routes: Routes = NavigationRoutes.routes;
