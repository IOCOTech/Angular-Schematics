import { TestBed, ComponentFixture, fakeAsync, tick } from '@angular/core/testing';
import { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';
import { AppComponent } from './app.component';
import { AppSnackBar } from '../app/app-services/snackbar/snackbar.app';
import { AbstractAppAuthentication } from '../app/app-services/authentication/authentication.app.abstract';
import { AppMonitoring } from '../app/app-services/monitoring/monitor.app';
// import { ModelSnackBarDetails } from '../app/models/snackbar/snackbar-details.model';
// import { of } from 'rxjs';
import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { UnitTestHelpers } from './unit-tests-helpers/unit-test.helper';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';

describe('AppComponent', () => {
  let component: AppComponent;
  let fixture: ComponentFixture<AppComponent>;
  let snackBar: jasmine.SpyObj<MatSnackBar>;
  let appSnackBar: jasmine.SpyObj<AppSnackBar>;
  let appAuthentication: jasmine.SpyObj<AbstractAppAuthentication>;
  let appMonitoring: jasmine.SpyObj<AppMonitoring>;

  beforeEach(async () => {
    snackBar = UnitTestHelpers.MockObjects.matSnackbar();
    appSnackBar = UnitTestHelpers.MockObjects.appSnackbar();
    appAuthentication = UnitTestHelpers.MockObjects.abstractAppAuthentication();
    appMonitoring = UnitTestHelpers.MockObjects.appMonitoring();

    await TestBed.configureTestingModule({
      imports: [
        AppComponent,
        MatSnackBarModule,
        NoopAnimationsModule
      ],
      providers: [
        { provide: MatSnackBar, useValue: snackBar },
        { provide: AppSnackBar, useValue: appSnackBar },
        { provide: AbstractAppAuthentication, useValue: appAuthentication },
        { provide: AppMonitoring, useValue: appMonitoring }
      ],
      schemas: [CUSTOM_ELEMENTS_SCHEMA],
    }).compileComponents();

    fixture = TestBed.createComponent(AppComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();

  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should register for authentication events on init', () => {
    component.ngOnInit();
    expect(appAuthentication.registerForAuthenticationEvents).toHaveBeenCalled();
  });

  // fit('should open a snackbar when onSnackbar event is triggered', fakeAsync(() => {
  //   const snackbarDetails = new ModelSnackBarDetails(
  //     AppComponent,
  //     (response: any) => { }
  //   );

  //   component.openSnackBar(snackbarDetails);
  //   tick(100);
  //   expect(snackBar.openFromComponent).toHaveBeenCalledWith(
  //     snackbarDetails.componentRef,
  //     { panelClass: ['custom-snackbar'] }
  //   );
  // }));

  // it('should dismiss the snackbar when onDismissSnackbar event is triggered', () => {
  //   component.snackbarRef = snackBar.openFromComponent({} as any) as any;
  //   (appSnackBar.onDismissSnackbar as any) = of(undefined);

  //   component.registerSnackbar();
  //   expect(component.snackbarRef.dismiss).toHaveBeenCalled();
  // });

  it('should log an event when the snackbar service is registered', () => {
    component.registerSnackbar();
    expect(appMonitoring.logEvent).toHaveBeenCalledWith(component, 'Snackbar service registered');
  });
});
